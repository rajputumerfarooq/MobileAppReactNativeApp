"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  configure: true,
  setTemporaryConfiguration: true,
  getLastLocations: true,
  checkAccuracyAuthorization: true,
  checkIOSAuthorization: true,
  requestIOSAuthorization: true,
  getAndroidLocationProvidersStatus: true,
  checkAndroidLocationSettings: true,
  locationEmitter: true,
  useLocation: true
};
exports.configure = configure;
exports.setTemporaryConfiguration = setTemporaryConfiguration;
exports.getLastLocations = getLastLocations;
exports.checkAccuracyAuthorization = checkAccuracyAuthorization;
exports.checkIOSAuthorization = checkIOSAuthorization;
exports.requestIOSAuthorization = requestIOSAuthorization;
exports.getAndroidLocationProvidersStatus = getAndroidLocationProvidersStatus;
exports.checkAndroidLocationSettings = checkAndroidLocationSettings;
exports.useLocation = useLocation;
exports.default = exports.locationEmitter = void 0;

var _nativeModule = _interopRequireDefault(require("./nativeModule"));

var _defaultConfiguration = _interopRequireDefault(require("./defaultConfiguration"));

var _reactNative = require("react-native");

var _react = require("react");

var _types = require("./types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) Mobeye.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @format
 */

/* get native module */
const {
  start,
  revertTemporaryConfiguration
} = _nativeModule.default;
/* init default configuration */

const _configuration = _defaultConfiguration.default;

function configure(configuration) {
  _nativeModule.default.configure({ ..._configuration,
    ...configuration
  });
}

function setTemporaryConfiguration(configuration) {
  _nativeModule.default.setTemporaryConfiguration({ ..._configuration,
    ...configuration
  });
}
/**
 * Get last `n` last locations computed by the service.
 * @param n last computed locations
 */


function getLastLocations(n) {
  return _nativeModule.default.getLastLocations(n).then(result => {
    const locations = JSON.parse(result);

    if (_reactNative.Platform.OS === 'ios') {
      locations.forEach(location => {
        location.mock = false;
      });
    }

    return locations;
  });
}
/**
 * Check location  accuracy authorization.
 */


function checkAccuracyAuthorization() {
  return _nativeModule.default.checkAccuracyAuthorization();
}
/**
 * Check location authorization for iOS.
 * To check for android just use AndroidPermissions
 */


function checkIOSAuthorization() {
  return _nativeModule.default.checkPermission();
}
/**
 * Request location authorization for iOS.
 * To request for android just use AndroidPermissions
 */


function requestIOSAuthorization() {
  return _nativeModule.default.askForPermission();
}
/* Get the location status for the GPS provider and the Network provider on Android */


function getAndroidLocationProvidersStatus() {
  return _nativeModule.default.getLocationProvidersStatus();
}
/* Check if location settings are coherent with user options and propose a resolution popup if it's possible on Android.
 * it returns a GeolocationError which is CHECK_SETTINGS_FAILURE when either the resolution is not feasible or when
 * it encounter a problem with the pendingIntent */


function checkAndroidLocationSettings() {
  return _nativeModule.default.checkLocationSettings();
}
/* Native event emitter to catch geolocations event */


const locationEmitter = new _reactNative.NativeEventEmitter(_nativeModule.default);
/**
 * A React Hook which updates when the location significantly changes.
 */

exports.locationEmitter = locationEmitter;

function useLocation() {
  const [location, setLocation] = (0, _react.useState)({
    latitude: -1,
    longitude: -1,
    accuracy: Number.MAX_SAFE_INTEGER,
    time: 0,
    mock: false
  });
  (0, _react.useEffect)(() => {
    /* get last known use position */
    getLastLocations(1).then(res => {
      res[0] && setLocation(res[0]);
    }).catch(console.log);
    /* subscribe to the listener */

    const subscription = locationEmitter.addListener('LOCATION_UPDATED', result => {
      if (result.success) {
        setLocation(result.payload);
      }
    });
    return () => subscription.remove();
  }, []);

  if (_reactNative.Platform.OS === 'ios') {
    location.mock = false;
  }

  return location;
}

var _default = {
  configure,
  start,
  setTemporaryConfiguration,
  revertTemporaryConfiguration,
  locationEmitter,
  getLastLocations,
  checkIOSAuthorization,
  requestIOSAuthorization,
  checkAccuracyAuthorization,
  getAndroidLocationProvidersStatus,
  checkAndroidLocationSettings
};
exports.default = _default;
//# sourceMappingURL=index.js.map