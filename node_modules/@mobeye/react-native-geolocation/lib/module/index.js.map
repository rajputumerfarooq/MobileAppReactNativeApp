{"version":3,"sources":["index.ts"],"names":["MobeyeGeolocation","DEFAULT_CONFIGURATION","NativeEventEmitter","Platform","useEffect","useState","start","revertTemporaryConfiguration","_configuration","configure","configuration","setTemporaryConfiguration","getLastLocations","n","then","result","locations","JSON","parse","OS","forEach","location","mock","checkAccuracyAuthorization","checkIOSAuthorization","checkPermission","requestIOSAuthorization","askForPermission","getAndroidLocationProvidersStatus","getLocationProvidersStatus","checkAndroidLocationSettings","checkLocationSettings","locationEmitter","useLocation","setLocation","latitude","longitude","accuracy","Number","MAX_SAFE_INTEGER","time","res","catch","console","log","subscription","addListener","success","payload","remove"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Mobeye.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\nimport MobeyeGeolocation from './nativeModule';\nimport DEFAULT_CONFIGURATION from './defaultConfiguration';\nimport {\n    AccuracyAuthorization,\n    Location,\n    LocationConfiguration,\n    LocationEvent,\n    LocationProvidersStatus,\n} from './types';\nimport { NativeEventEmitter, PermissionStatus, Platform } from 'react-native';\nimport { useEffect, useState } from 'react';\n\n/* get native module */\nconst { start, revertTemporaryConfiguration } = MobeyeGeolocation;\n\n/* init default configuration */\nconst _configuration: LocationConfiguration = DEFAULT_CONFIGURATION;\n\nexport function configure(configuration?: Partial<LocationConfiguration>): void {\n    MobeyeGeolocation.configure({\n        ..._configuration,\n        ...configuration\n    });\n}\n\nexport function setTemporaryConfiguration(configuration?: Partial<LocationConfiguration>): void {\n    MobeyeGeolocation.setTemporaryConfiguration({\n        ..._configuration,\n        ...configuration\n    });\n}\n\n/**\n * Get last `n` last locations computed by the service.\n * @param n last computed locations\n */\nexport function getLastLocations(n: number): Promise<[Location]> {\n    return MobeyeGeolocation.getLastLocations(n).then((result) => {\n        const locations: [Location] = JSON.parse(result);\n\n        if (Platform.OS === 'ios') {\n            locations.forEach(location => {\n                location.mock = false\n            })\n\n        }\n\n        return locations;\n    });\n}\n\n/**\n * Check location  accuracy authorization.\n */\nexport function checkAccuracyAuthorization(): Promise<AccuracyAuthorization> {\n    return MobeyeGeolocation.checkAccuracyAuthorization();\n}\n\n/**\n * Check location authorization for iOS.\n * To check for android just use AndroidPermissions\n */\nexport function checkIOSAuthorization(): Promise<boolean> {\n    return MobeyeGeolocation.checkPermission();\n}\n\n/**\n * Request location authorization for iOS.\n * To request for android just use AndroidPermissions\n */\nexport function requestIOSAuthorization(): Promise<PermissionStatus> {\n    return MobeyeGeolocation.askForPermission();\n}\n\n/* Get the location status for the GPS provider and the Network provider on Android */\nexport function getAndroidLocationProvidersStatus(): Promise<LocationProvidersStatus> {\n   return MobeyeGeolocation.getLocationProvidersStatus();\n}\n\n/* Check if location settings are coherent with user options and propose a resolution popup if it's possible on Android.\n * it returns a GeolocationError which is CHECK_SETTINGS_FAILURE when either the resolution is not feasible or when\n * it encounter a problem with the pendingIntent */\nexport function checkAndroidLocationSettings(): Promise<void> {\n    return MobeyeGeolocation.checkLocationSettings();\n}\n\n/* Native event emitter to catch geolocations event */\nexport const locationEmitter = new NativeEventEmitter(MobeyeGeolocation);\n\n/**\n * A React Hook which updates when the location significantly changes.\n */\nexport function useLocation(): Location {\n\n    const [location, setLocation] = useState<Location>({\n        latitude: -1,\n        longitude: -1,\n        accuracy: Number.MAX_SAFE_INTEGER,\n        time: 0,\n        mock: false,\n    });\n\n    useEffect(() => {\n        /* get last known use position */\n\n        getLastLocations(1).then((res) => {\n            res[0] && setLocation(res[0])\n        }).catch(console.log);\n\n\n\n        /* subscribe to the listener */\n        const subscription = locationEmitter.addListener('LOCATION_UPDATED', (result: LocationEvent) => {\n            if (result.success) {\n                setLocation(result.payload);\n            }\n        });\n        return () => subscription.remove();\n    }, []);\n\n    if (Platform.OS === 'ios') {\n        location.mock = false\n    }\n\n    return location;\n}\n\nexport * from './types';\nexport default {\n    configure,\n    start,\n    setTemporaryConfiguration,\n    revertTemporaryConfiguration,\n    locationEmitter,\n    getLastLocations,\n    checkIOSAuthorization,\n    requestIOSAuthorization,\n    checkAccuracyAuthorization,\n    getAndroidLocationProvidersStatus,\n    checkAndroidLocationSettings,\n};\n"]}